---
title: "Assignment 4"
subtitle: "Due at 11:59pm on November 7."
authors: "Akari Oya"
format: pdf
editor: visual
---

This is an individual assignment. Turn in this assignment as an HTML or PDF file to ELMS. Make sure to include the R Markdown or Quarto file that was used to generate it. Include the GitHub link for the repository containing these files.

```{r, include=FALSE}
library(tidyverse)
library(DBI)
library(dbplyr)
library(bigrquery)
```

### Github Link = <https://github.com/akr-oya/SURVMETH727_Oya.git>

Go to <https://console.cloud.google.com> and make sure you are logged in a non-university Google account. **This may not work on a university G Suite account because of restrictions on those accounts.** Create a new project by navigating to the dropdown menu at the top (it might say "Select a project") and selecting "New Project" in the window that pops up. Name it something useful.

After you have initialized a project, paste your project ID into the following chunk.

```{r}
# Save project ID from Google Cloud
project <- "surv727-database"
```

We will connect to a public database, the Chicago crime database, which has data on crime in Chicago.

```{r}
# Establish connection to database
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bigquery-public-data",
  dataset = "chicago_crime",
  billing = project
)
con
```

We can look at the available tables in this database using `dbListTables`.

```{r}
dbListTables(con) #see names of tables in database
dbListFields(con, "crime") #see column names
```

### Using SQL Code

Write a first query that counts the number of rows of the \`crime\` table in the year 2016. Use code chunks with {sql connection = con} in order to write SQL code within the document.

```{sql connection= con, message = FALSE}
SELECT count(*)
FROM crime
WHERE year = 2016
LIMIT 10;
```

if I get an error for tbl(), use df <- dbGetQuery(con, sql)

Next, count the number of arrests grouped by `primary_type` in 2016. Note that is a somewhat similar task as above, with some adjustments on which rows should be considered. Sort the results, i.e. list the number of arrests in a descending order.

```{sql connection= con, message = FALSE}
SELECT count(arrest), primary_type
FROM crime
WHERE year = 2016
GROUP BY primary_type
ORDER BY count(arrest) DESC
LIMIT 10;
```

We can also use the `date` for grouping. Count the number of arrests grouped by hour of the day in 2016. You can extract the latter information from `date` via `EXTRACT(HOUR FROM date)`. Which time of the day is associated with the most arrests?

```{sql connection= con, message = FALSE}
SELECT count(arrest), EXTRACT(HOUR FROM date)
FROM crime
WHERE year = 2016
GROUP BY EXTRACT(HOUR FROM date)
LIMIT 10;
```

Focus only on `HOMICIDE` and count the number of arrests for this incident type, grouped by year. List the results in descending order.

```{sql connection= con, message = FALSE}
SELECT COUNT(arrest) AS arrest_count, year
FROM crime
WHERE primary_type = 'HOMICIDE'
GROUP BY year
ORDER BY arrest_count DESC
LIMIT 10;
```

- The above counts arrests = true by default since it's a binary variable. 

Find out which districts have the highest numbers of arrests in 2015 and 2016. That is, count the number of arrests in 2015 and 2016, grouped by year and district. List the results in descending order.

```{sql connection= con, message = FALSE}
SELECT COUNT(arrest) AS arrest_count, year, district
FROM crime
WHERE year = 2015 OR year = 2016
GROUP BY year, district
ORDER BY arrest_count DESC
LIMIT 10;
```


### Using DBI Package

Lets switch to writing queries from within R via the `DBI` package. Create a query object that counts the number of arrests grouped by `primary_type` of district 11 in year 2016. The results should be displayed in descending order.

```{r}
sql <- "SELECT count(arrest) as arrest_count, primary_type
        FROM crime
        WHERE district = 11 AND year = 2016
        GROUP BY primary_type
        ORDER BY arrest_count DESC
        LIMIT 10"
```

```{r}
dbGetQuery(con, sql)
```

Try to write the very same query, now using the `dbplyr` package. For this, you need to first map the `crime` table to a tibble object in R.
```{r}
# Assign data table to object
crime <- dbGetQuery(con, "SELECT * FROM crime") # crime <- tbl(con, "crime") did not work

# Check to see if object is tibble
str(crime)
class(crime)
```

Again, count the number of arrests grouped by `primary_type` of district 11 in year 2016, now using `dplyr` syntax.

```{r}
crime %>%
  select(arrest, primary_type, district, year) %>%
  filter(district == 11 & year == 2016 & arrest == TRUE) %>%
  group_by(primary_type) %>% 
  count()
```

Count the number of arrests grouped by `primary_type` and `year`, still only for district 11. Arrange the result by `year`. 
Assign the results of the query above to a local R object.

```{r, message = FALSE}
# Assign filtered data into another object
sql_data <-
  crime %>%
  select(year, arrest, district, primary_type) %>%
  filter(district == 11 & year == 2016 & arrest == TRUE) %>%
  collect()
```

Confirm that you pulled the data to the local environment by displaying the first ten rows of the saved data set.

```{r}
# Show first ten rows of the saved data set
head(sql_data, n = 10)
```

Close the connection.

```{r}
dbDisconnect(con)
```
